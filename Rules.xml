<rules>
    <headers>
        <include>Math/MathDefs.h</include>
        <include>Container/RefCounted.h</include>
        <include>Core/Object.h</include>
        <include>Core/Context.h</include>
        <include>Core/Variant.h</include>
        <include>Core/Attribute.h</include>
        <include>Core/Profiler.h</include>
        <include>Core/Spline.h</include>
        <include>Core/Timer.h</include>
        <include>Engine/*.h</include>
        <include>IK/*.h</include>
        <exclude>IK/IKConverters.h</exclude>
        <include>**/SDL/SDL_scancode.h</include>
        <include>**/SDL/SDL_joystick.h</include>
        <include>**/SDL/SDL_gamecontroller.h</include>
        <include>**/SDL/SDL_keycode.h</include>
        <include>**/SDL/SDL_mouse.h</include>
        <include>Input/*.h</include>
        <include>Scene/*.h</include>
        <include>Audio/*.h</include>
        <include>IO/Serializer.h</include>
        <include>IO/Deserializer.h</include>
        <include>IO/AbstractFile.h</include>
        <include>IO/Log.h</include>
        <include>IO/PackageFile.h</include>
        <include>Navigation/*.h</include>
        <include>Resource/BackgroundLoader.h</include>
        <include>Resource/Image.h</include>
        <include>Resource/Localization.h</include>
        <include>Resource/PListFile.h</include>
        <include>Resource/Resource.h</include>
        <include>Resource/ResourceCache.h</include>
        <include>Resource/ResourceEvents.h</include>
        <include>UI/*.h</include>
        <exclude>UI/FontFace*.h</exclude>
    </headers>
    <compiler>
        <define>URHO3D_API</define>
    </compiler>
    <symbols>
        <include>SDL_*</include>
        <include>SDLK_*</include>
        <include>Urho3D</include>
        <include>Urho3D::*</include>
        <exclude>Urho3D::*Impl</exclude>
        <exclude>Urho3D::EventHandler*</exclude>
        <exclude>Urho3D::ObjectFactory</exclude>
        <exclude>Urho3D::EventNameRegistrar</exclude>
        <exclude>Urho3D::CustomVariantValue*</exclude>
        <exclude>Urho3D::String</exclude>
        <exclude>Urho3D::WString</exclude>
        <exclude>Urho3D::StringHash</exclude>
        <exclude>Urho3D::Variant::customValue*_</exclude>
        <exclude>Urho3D::Variant::Variant(void*)</exclude>
        <!-- C# reflection can be used instead of these -->
        <exclude>Urho3D::TypeInfo</exclude>
        <exclude>Urho3D::*::GetType() const</exclude>
        <exclude>Urho3D::*::GetTypeStatic()</exclude>
        <exclude>Urho3D::*::GetTypeName() const</exclude>
        <exclude>Urho3D::*::GetTypeNameStatic()</exclude>
        <exclude>Urho3D::*::GetTypeInfo() const</exclude>
        <exclude>Urho3D::*::GetTypeInfoStatic()</exclude>
        <exclude>Urho3D::File::ReadText(Urho3D::String&amp;)</exclude>
        <exclude>Urho3D::FileWatcher::GetNextChange(Urho3D::String&amp;)</exclude>  <!-- TODO: Wrap manually returning a string instead of bool -->
        <exclude>Urho3D::AttributeInfo::enumNames_</exclude>
        <exclude>Urho3D::ResourceRouter</exclude>
        <exclude>Urho3D::*::FindAttributeAnimationTarget(Urho3D::String const&amp;,Urho3D::String&amp;)</exclude>   <!-- out parameters -->
        <!-- https://github.com/foonathan/cppast/issues/41 -->
        <exclude>Urho3D::ValueAnimation::SetEventFrame(float,Urho3D::StringHash const&amp;,Urho3D::VariantMap const&amp;)</exclude>
        <exclude>Urho3D::Object::SendEvent(Urho3D::StringHash,Urho3D::VariantMap const&amp;)</exclude>
        <exclude>Urho3D::Variant::Variant(Urho3D::String const&amp;)</exclude>
        <exclude>Urho3D::Variant::Variant(Urho3D::String const&amp;,Urho3D::String const&amp;)</exclude>
        <exclude>Urho3D::Variant::Variant(Urho3D::VariantType,Urho3D::String const&amp;)</exclude>
        <exclude>Urho3D::Variant::FromString(Urho3D::String const&amp;,Urho3D::String const&amp;)</exclude>
        <exclude>Urho3D::Variant::FromString(Urho3D::VariantType,Urho3D::String const&amp;)</exclude>
        <exclude>Urho3D::Node::GetChild(Urho3D::String const&amp;,bool) const</exclude>
        <exclude>Urho3D::ResourceRef::ResourceRef(Urho3D::String const&amp;,Urho3D::String const&amp;)</exclude>
        <exclude>Urho3D::Text3D::text_</exclude>    <!-- TODO: Setter should not be generated -->
        <exclude>Urho3D::UI::DragData</exclude>
        <!-- TODO: `out` parameters -->
        <exclude>Urho3D::CrowdManager::Raycast(Urho3D::Vector3 const&amp;,Urho3D::Vector3 const&amp;,int,Urho3D::Vector3*)</exclude>
        <exclude>Urho3D::CrowdManager::GetDistanceToWall(Urho3D::Vector3 const&amp;,float,int,Urho3D::Vector3*,Urho3D::Vector3*)</exclude>
    </symbols>
    <inheritable>
        <class>Urho3D::Application</class>
        <class>Urho3D::Component</class>
        <class>Urho3D::LogicComponent</class>
    </inheritable>
    <typemaps>
        <typemap type="Urho3D::StringHash" ctype="unsigned" cstype="global::Urho3D.StringHash">
            <cpp_to_c>{{value}}.Value()</cpp_to_c>
            <c_to_cpp>Urho3D::StringHash({{value}})</c_to_cpp>
            <pinvoke_to_cs>new StringHash({{value}})</pinvoke_to_cs>
            <cs_to_pinvoke>{{value}}.Hash</cs_to_pinvoke>
        </typemap>
        <!-- TODO: Avoid string copying when possible.
        String typemaps always return a copy of string which is freed by mono. Sometimes this is not necessary and c api
        could return pointer pointing to string content held by the engine. However mono is required to not free such
        string after conversion, which implies handling it manually. Also investigate how .net framework behaves in this
        situation.
        -->
        <typemap type="Urho3D::String" ctype="char const*" cstype="string">
            <cpp_to_c>strdup({{value}}.CString())</cpp_to_c>
            <c_to_cpp>Urho3D::String({{value}})</c_to_cpp>
        </typemap>
        <typemap type="char const*">
            <cpp_to_c>strdup({{value}})</cpp_to_c>
        </typemap>
        <typemap type="Urho3D::VariantMap" ctype="Urho3D::VariantMap*" ptype="IntPtr" cstype="global::Urho3D.VariantMap">
            <cpp_to_c>script->AddRef&lt;Urho3D::VariantMap&gt;({{value}})</cpp_to_c>
            <c_to_cpp>*{{value}}</c_to_cpp>
            <pinvoke_to_cs>new global::Urho3D.VariantMap({{value}})</pinvoke_to_cs>
            <cs_to_pinvoke>{{value}}.instance_</cs_to_pinvoke>
        </typemap>
        <typemap type="Urho3D::Vector3" cstype="Urho3D.Vector3" ptype="Urho3D.Vector3" />
    </typemaps>
</rules>
